@functions{

    /// <summary>
    /// This is where the shorthand types are deciphered. Fix/love/tweak as you will
    /// </summary>
    static string SetColumnType(string colType) {

        return colType.Replace("pk", "int PRIMARY KEY IDENTITY(1,1)")
            .Replace("money", "decimal(8,2)")
            .Replace("date", "datetime")
            .Replace("string", "nvarchar(255)")
            .Replace("boolean", "bit")
            .Replace("text", "nvarchar(MAX)");

    }

    /// <summary>
    /// Build a list of columns from the past-in array in the JSON file
    /// </summary>
    static string BuildColumnList(dynamic columns) {
        //holds the output
        var sb = new System.Text.StringBuilder();
        var counter = 0;
        foreach (dynamic col in columns) {
            //name
            sb.AppendFormat(", {0} ", col.name);

            //append on the type. Don't do this in the formatter since the replacer might return no change at all
            sb.Append(SetColumnType(col.type));

            //nullability - don't set if this is the Primary Key
            if (col.type != "pk") {
                if (col.nullable != null) {
                    if (col.nullable) {
                        sb.Append(" NULL ");
                    } else {
                        sb.Append(" NOT NULL ");
                    }
                } else {
                    sb.Append(" NULL ");
                }
            }

            counter++;
            //this format will indent the column
            if (counter < columns.Length) {
                sb.Append("\r\n\t");
            }

        }
        return sb.ToString();
    }
    /// <summary>
    /// Strip out the leading comma. Wish there was a more elegant way to do this 
    /// and no, Regex doesn't count
    /// </summary>
    static string StripLeadingComma(string columns) {
        if (columns.StartsWith(", "))
            return columns.Substring(2, columns.Length - 2);
        return columns;
    }

    /// <summary>
    /// This is the main "builder" of the DDL SQL and it's tuned for SQL CE. 
    /// The idea is that you build your app using SQL CE, then upgrade it to SQL Server when you need to
    /// </summary>
    static string GetCommand(dynamic op) {

        //the "op" here is an "up" or a "down". It's dynamic as that's what the JSON parser
        //will return. The neat thing about this parser is that the dynamic result will
        //return null if the key isn't present - so it's a simple null check for the operations/keys we need.
        //this will allow you to expand and tweak this migration stuff as you like

        var result = "";
        var pkName = "Id";
        //what are we doing?

        if (op == null)
            return "-- no DOWN specified. If this is a CREATE table or ADD COLUMN - it will be generated for you";
        
        if (op.GetType() == typeof(string))
            return SetColumnType(op).Replace("{", "").Replace("}", "");

        //CREATE
        if (op.create_table != null) {
            var columns = BuildColumnList(op.create_table.columns);

            //add some timestamps?
            if (op.create_table.timestamps != null) {
                columns += "\n\t, CreatedOn datetime DEFAULT getdate() NOT NULL\n\t, UpdatedOn datetime DEFAULT getdate() NOT NULL";
            }

            //make sure we have a PK :)
            if (!columns.Contains("PRIMARY KEY") & !columns.Contains("IDENTITY")) {
                columns = "Id int PRIMARY KEY IDENTITY(1,1) NOT NULL \n\t" + columns;
            } else {
                foreach (var col in op.create_table.columns) {
                    if (col.type.ToString() == "pk") {
                        pkName = col.name;
                        break;
                    }
                }
            }
            columns = StripLeadingComma(columns);
            result = string.Format("CREATE TABLE {0}\r\n\t ({1}) ", op.create_table.name, columns);

            //DROP 
        } else if (op.drop_table != null) {
            return "DROP TABLE " + op.drop_table;
            //ADD COLUMN
        } else if (op.add_column != null) {
            result = string.Format("ALTER TABLE {0} ADD {1} ", op.add_column.table, StripLeadingComma(BuildColumnList(op.add_column.columns)));
            //DROP COLUMN
        } else if (op.remove_column != null) {
            result = string.Format("ALTER TABLE {0} DROP COLUMN {1}", op.remove_column.table, op.remove_column.name);
            //CHANGE
        } else if (op.change_column != null) {
            result = string.Format("ALTER TABLE {0} ALTER COLUMN {1}", op.change_column.table, StripLeadingComma(BuildColumnList(op.change_column.columns)));
        }

        return result;
    }

    /// <summary>
    /// This is the migration file loader. It uses a SortedDictionary that will sort on the key (which is the file name). 
    /// So be sure to name your file with a descriptive, sortable name. A good way to do this is the year_month_day_time:
    /// 2011_04_23_1233.js
    /// </summary>
    static SortedDictionary<string, dynamic> LoadMigrations(string migrationPath) {
        //read in the files in the db/migrations directory
        var migrationDir = new System.IO.DirectoryInfo(migrationPath);
        var result = new SortedDictionary<string, dynamic>();

        var files = migrationDir.GetFiles();
        foreach (var file in files) {
            using (var t = new StreamReader(file.FullName)) {
                var bits = t.ReadToEnd();

                //Uh oh! Did you get an error? JSON can be tricky - you have to be sure you quote your values
                //as javascript only recognizes strings, booleans, numerics, or arrays of those things.
                //if you always use a string
                dynamic decoded = Json.Decode(bits);
                result.Add(Path.GetFileNameWithoutExtension(file.FullName), decoded);

            }
        }
        return result;
    }
    /// <summary>
    /// This loads up a special table that keeps track of what version your DB is on. It's one table with one field
    /// </summary>
    static void EnsureSchema(Database db) {
        //does schema info exist?
        var exists = db.QueryValue("SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SchemaInfo'");
        if (exists == 0) {
            db.Execute("CREATE TABLE SchemaInfo (Version INT)");
            db.Execute("INSERT INTO SchemaInfo(Version) VALUES(0)");
        }
    }

    static void CheckForExecute(Database db, dynamic op) {
        //the only thing you need to set is right here...
        if (op.GetType() != typeof(string)) {
            if (!String.IsNullOrEmpty(op.execute)) {
                db.Execute(op.execute);
            }
        }
    }
    /// <summary>
    /// If a "down" isn't declared, this handy function will try and figure it out for you
    /// </summary>
    static string ReadMinds(dynamic migration) {
        //CREATE
        if (migration.up.create_table != null) {
            return string.Format("DROP TABLE {0}", migration.up.create_table.name);

            //DROP COLUMN
        } else if (migration.up.add_column != null) {
            return string.Format("ALTER TABLE {0} DROP COLUMN {1}", migration.up.add_column, migration.up.add_column.columns[0].name);
        }
        return "";

    }
}
@{
    
    var cstring = "Larry";
    var db = Database.Open(cstring);
    EnsureSchema(db);
    var version = db.QueryValue("SELECT Version from SchemaInfo");

    //get the files
    var files = LoadMigrations(Server.MapPath("~/DB/Migrations"));
    if(IsPost){
        var to = int.Parse(Request.Form["to"]);

        if(version < to){
            //UP
            for (int i = version; i < to; i++) {
                //grab the next version - we start the loop with the current
                var migration = files.Values.ElementAt(i);
                db.Execute(GetCommand(migration.up));
                
                //increment the version
                db.Execute("UPDATE SchemaInfo SET Version = Version +1");

                //run any execution calls that are part of "up"
                CheckForExecute(db, migration.up);
            }
        }else{
            //DOWN
            for (int i = version; i > to; i--) {
                
                //get the migration and execute it
                var migration = files.Values.ElementAt(i-1);
                if(migration.down == null){
                    var cmd = ReadMinds(migration);
                    if(!String.IsNullOrEmpty(cmd)){
                        db.Execute(cmd);
                    }
                }else{
                    db.Execute(GetCommand(migration.down));
                    //run any execution calls that are part of "up"
                    CheckForExecute(db, migration.down);
                }   
                //decrement the version
                db.Execute("UPDATE SchemaInfo SET Version = Version - 1");

            }
        }

        //to avoid repops of the form
        Response.Redirect("migrator");

    }

    
    

    var counter = 1;
 
}

<script  type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js"></script>
<script  type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.11/jquery-ui.min.js"></script>
<script type="text/javascript">
    $().ready(function () {
        $('.sqlbox').click(function () {
            jQuery(".sql", this).slideToggle();
        });
    });
</script>
<style>
    body
    { font-family:"Helvetica Neue","Helvetica";
    }
    .sql
    {
        display:none;
    }
    .trigger
    {
        cursor:pointer;
    }
    legend
    {
        padding:6px;
        width:290px;
        border:1px solid #ccc;
        font-size:1.4em;
        background-color:#A9D5D9;
    }
    fieldset
    {
        font-family: "Lucida Grande", "helvetica", "Lucida Sans";
        -moz-border-radius: 15px;
        border-radius: 15px;
        border:0px;
        -moz-box-shadow: 4px 4px 4px #ccc;
      	-webkit-box-shadow: 4px 4px 4px #ccc;
      	box-shadow: 4px 4px 4px #ccc;
      	margin:36px;
    }
    .current
    {
        background-color:#e5e5e5;
    }
    .to-run
    {
        background-color:#DEDE91;
    }
    select
    {
        background-color:#f5f5f5;
        border:2px solid #ccc;
        font-size:1.3em;
    }
</style>
<h1>Manatee</h1>
<p>
    <table cellpadding="5">
        <tr>
            <td>Current Version:</td>
            <td>@version</td>
        </tr>
        <tr>
            <td>Migrate To:</td>
            <td>
                <form action = "migrator" method="post">
                <select name = "to" >
                    <option value = "0" selected="selected">Back to the start</option>
                 
                 @foreach (var file in files) {
                    <option value = "@counter">@file.Key.Replace("_", " ")</option>
                     counter++;
                  }
                    <option value = "@files.Count" selected="selected">All The Way Up</option>
                </select>
                <input type="submit" value = "go" />
                </form>
            </td>
        </tr>
    </table>
</p>
    @{counter=0;}
    @foreach (var file in files) {
        string className = "to-run";
        if (version <= counter) {
            className = "current";
        }
        <fieldset class = "@className">
            <legend>@file.Key.Replace("_", " ")</legend>
            <div class = "sqlbox">
                <p class = "trigger">Show SQL</p>
                <div class = "sql">
                <h2>Up</h2>
            
<pre>
@GetCommand(file.Value.up)
</pre>
            
                <h2>Down</h2>
            
<pre>
@GetCommand(file.Value.down)
</pre>
                </div>
            </div>
        </fieldset>
counter++;
    }